"""
예전 문제에서 dp를 사용했던 것 같다.
k가 n보다 작거나 같으면 그냥 차만큼 출력하면 돼
k = 4, n = 6면 5, 4 2번
k가 n보다 클 때
k를 기준으로 +1하고 나누냐, 아니면 -1하고 나누냐
+3 이나 -3은 3번을 써야하는데, 그냥 나누고 +1이나 -1하는거랑 동일
19 + 1 / 2 => 10+1, 19+3 / 2 = 11
그러면 자 예시로 보자
17에서 +1하고 2 나누는거랑, -1하고 나누는거랑 뭐가 더 나을까?
5: 9랑 8중에 8은 5를 만들기 위해 -3 또는 +2 한 뒤 /2
9는 +1하고 /2만 하면 돼

n보다 크고 2n보다 작을 때까지 무조건 나누는게 빨라

그래프 탐색이라는디..? 근데 그냥 원래 하려던 방식대로 못푸나..?
dp[i] = min(dp[i-1], dp[i+1], dp[i//2])
5 17이면
dp[0] = 5-0 = 5
dp[1] = 5-1 = 4
...
dp[4] = 5-4 = 1
dp[5] = 0
dp[6] = dp[5]+1, dp[3]+1 = 1
dp[7] = dp[6]+1, dp[4]+2 = 2
dp[8] = dp[7]+1, dp[4]+1 = 2
"""

import sys
input = sys.stdin.readline

n, k = map(int, input().split())
dp = [0] * 100001

for i in range(n+1):
    dp[i] = n-i # n에서 i까지 가는 건 -1씩 계속

for i in range(n+1, k+1):
    if i % 2 == 0:
        dp[i] = min(dp[i-1]+1, dp[i//2]+1)
    else:
         dp[i] = min(dp[i-1]+1, dp[(i+1)//2]+2)

print(dp[k])